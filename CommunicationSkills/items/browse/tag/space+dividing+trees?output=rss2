<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title><![CDATA[Incorporating Communication Outcomes into the Computer Science Curriculum]]></title>
    <link>http://cs-comm.lib.muohio.edu/items/browse/tag/space+dividing+trees?output=rss2</link>
    <description><![CDATA[]]></description>
    <pubDate>Mon, 18 May 2020 19:29:18 -0400</pubDate>
    <managingEditor>millarj@muohio.edu (Incorporating Communication Outcomes into the Computer Science Curriculum)</managingEditor>
    <generator>Zend_Feed</generator>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <item>
      <title><![CDATA[The Closest Starbucks Problem: Space Dividing Data Structures
]]></title>
      <link>http://cs-comm.lib.muohio.edu/items/show/62</link>
      <description><![CDATA[<div class="element-set">
    <!--h2>Dublin Core</h2-->
        <div id="dublin-core-title" class="element">
        <h3>Title        </h3>
                                    <div class="element-text">The Closest Starbucks Problem: Space Dividing Data Structures<br />
</div>
                    </div><!-- end element -->
            <div id="dublin-core-subject" class="element">
        <h3>Course        </h3>
                                    <div class="element-text">Data Structures</div>
                    </div><!-- end element -->
            <div id="dublin-core-description" class="element">
        <h3>Abstract        </h3>
                                    <div class="element-text">Implementation of a space-partitioning data structure in order to solve the nearest neighbor problem.<br />
<br />
Given a static list of points, the student must design a data structure supporting an efficient nearest-neighbor search; points are awarded based on correctness and efficiency.  Students are encouraged to use a kd-tree, giving them experience in working with binary search trees and dealing with problems within the area of computational geometry.<br />
<br />
Duration: 2 weeks<br />
<br />
Background: Students are assumed to have 2.5 semesters of programming experience, including at least half a semester of C++, and to have had exposure to the concept of binary search trees.  kd-trees are not covered in the assignment; instructors should consider discussing them in class before students begin.<br />
</div>
                    </div><!-- end element -->
            <div id="dublin-core-creator" class="element">
        <h3>Author        </h3>
                                    <div class="element-text">John Karro, William Brinkman</div>
                    </div><!-- end element -->
                    </div><!-- end element-set -->
<div class="element-set">
    <!--h2>Assignment Item Type Metadata</h2-->
        <div id="assignment-item-type-metadata-genre" class="element">
        <h3>Genre        </h3>
                                    <div class="element-text">code, run-time analysis</div>
                    </div><!-- end element -->
            <div id="assignment-item-type-metadata-duration-of-assignment" class="element">
        <h3>Assignment Duration        </h3>
                                    <div class="element-text">Two Weeks</div>
                    </div><!-- end element -->
            <div id="assignment-item-type-metadata-skill" class="element">
        <h3>Communication Skill        </h3>
                                    <div class="element-text">reading</div>
                    </div><!-- end element -->
            <div id="assignment-item-type-metadata-technical-skill" class="element">
        <h3>Technical Skill        </h3>
                                    <div class="element-text">Implementation, Recursion, trees/heaps, selection of algorithm and data structures</div>
                    </div><!-- end element -->
            <div id="assignment-item-type-metadata-workplace-scenario" class="element">
        <h3>Workplace Scenario        </h3>
                                    <div class="element-text">Workplace Scenario:<br />
You have been hired to design a new Starbucks locator smart phone app.  The app will download with a list of U.S. Starbucks locations.  When activated, the app will be provide with the coordinates by the device GPS, and locate the closest Starbucks to the current position (which it can then feed to a map app that will be in charge of calculating the route).  Your problem is to figure out how to maintain the list in such a way that it can be quickly queried. You could just scan the full list – but given the size of the list, and the user’s speed expectations, that isn’t going to make for a happy client.  You need to do better for that.<br />
<br />
On the bright side: you can consider the list static.  New Starbucks do not open all that often.  So your data structure does not need to support an insert data structure.  (When there is an update, you can just reconstruct the entire data structure from the modified list during down time.)  So you priority is the query runtime.  The user need to find the closest Starbuck’s as fast as possible – the user needs coffee now!!!<br />
<br />
<br />
Importance: In this you will gain experience with dictionary data structures by designing and implementing a data structure that support fast “nearest neighbor” queries.  The ideal data structure for the assignment is a space-dividing structure such as the kd-tree; implementations based on this will be considerably faster than any alternative without sacrificing on precision.  There are, however, many alternatives – students unable to implement such a structure will be able to make use of simpler structure, at a significant loss of time and/or precision (and, hence, length).<br />
</div>
                    </div><!-- end element -->
            <div id="assignment-item-type-metadata-team-size" class="element">
        <h3>Team Size        </h3>
                                    <div class="element-text">N/A</div>
                    </div><!-- end element -->
            </div><!-- end element-set -->
<div class="item-file application-zip"><a class="download-file" href="http://cs-comm.lib.muohio.edu/archive/files/7a835dc759e87de537410099f1995f06.zip">materials.zip</a></div><div class="item-file application-zip"><a class="download-file" href="http://cs-comm.lib.muohio.edu/archive/files/97c9d13a1750dac22734891f6a91f4e7.docx">Proj5.docx</a></div>]]></description>
      <pubDate>Tue, 24 Jul 2012 17:04:59 -0400</pubDate>
      <enclosure url="http://cs-comm.lib.muohio.edu/archive/fullsize/7a835dc759e87de537410099f1995f06.jpg" type="application/zip" length="239368"/>
    </item>
  </channel>
</rss>
