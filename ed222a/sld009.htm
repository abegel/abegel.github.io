
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<html>
<head>

<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <title>Analysis</title> 
</head>

<body>

<center>
<table WIDTH="100%"> 
     <tr> <td WIDTH="100%" ALIGN="CENTER">
         <img SRC="img009.gif" usemap="sld009.htm#Objmap" WIDTH="480" HEIGHT="360" BORDER="0">
     </td> </tr>
     <tr> <td WIDTH="100%" ALIGN="CENTER">
         <a HREF="sld001.htm">First</a>&nbsp;&nbsp;
         <a HREF="sld008.htm">Previous</a>&nbsp;&nbsp;
         <a HREF="sld010.htm">Next</a>&nbsp;&nbsp;
         <a HREF="sld013.htm">Last</a>&nbsp;&nbsp;
&nbsp;&nbsp;         <a HREF="index.html">Index</a>&nbsp;&nbsp;
         <a HREF="http://www.cs.berkeley.edu/~abegel">Home</a>&nbsp;&nbsp;
         <a HREF="tsld009.htm">Text</a>&nbsp;&nbsp;
     </td> </tr>
</table>
<p>Slide 9 of 13</p>
</center>
<!-- <UL><H2>Analysis</H2></UL></P><P><UL><LI><H2>Students have trouble with recursion</H2><UL><LI>In Scheme, they use recursion because there is no alternative.<LI>In Java, they’d rather use while loops and for loops. <UL><LI>Iterative loops are more concrete about their limits. <LI>Easy to look at and understand how the loop works.</UL><LI>Since iterative loops are equivalent to tail recursion, tail recursive procedures are easy to write in Java.<UL><LI>Most ended up writing reverse accidentally when they tried to write append.</UL><LI>Unfortunately, they don’t switch to recursion when the simple solution demands it.<UL><LI>In Scheme, they used recursion to define append, but in Java they had to hack up a kludgy solution using iterative loops.</UL></UL></UL></P><P>  -->
</body>
</html>
